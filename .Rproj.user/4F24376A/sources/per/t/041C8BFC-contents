# altitude jags model simulation
# extremely fake data but this my first impression of how to structure it
# there might be ways to quantify argos error that would be more informative
# than adding an error term to a model but I'm not sure

# edit to test github desktop commits

library(boot)
library(jagsUI)

# Simulate fake data *******************************************************************
# 100 points:
points <- 1:100

# season
seasons_all <- c(rep('winter', 25), rep('spring', 25), rep('summer',25), rep('fall', 25)) 
#season_sim <- as.factor(as.numeric(seasons_all))
#Bsn <- 0.4 #c(rep(0.1, 25), rep(0.4, 25), rep(0.1,25), rep(0.3, 25)) 

# fake continuous covariate
fake_sim <- rnorm(100,5,1) 
#Bf <- 0.2

#alph <- 0.1 

# State - this is being weird and I don't feel like trying to fix it it
#state <- numeric()
#for (j in 1:100){
#  P <- inv.logit(alph + Bal*alt_sim[j]+Bf*fake_sim[j]) 
#  state[j] <- rbinom(1,1,P)
#}
#length(which(breed_sim==1))

# state this way instead
state <- numeric()
state[1:25] <- rbinom(25,1,0.1)
state[26:50] <- rbinom(25,1,0.7)
state[51:75] <- rbinom(25,1,0.1)
state[76:100] <- rbinom(25,1,0.5)

# observed altitude
#alt_sim <- numeric()
#for (j in 1:100){
#  if (state[j]==0){
#    alt_sim[j] <- rnorm(1, 50,10)}
#  else {
#    alt_sim[j] <- rnorm(1, 100,10)
#  }
#}
#Bal <- 1.2

# or could just do 
alt_sim <- rnorm(100, 150, 20)

# full data set and subsampled data sets
dt <- data.frame(point=points, state=state, season=seasons_all, fake=fake_sim, altitude=alt_sim)  
dt

# Jags Model *********************************************************************************

# name data terms
state <- dt$state
altitude <- dt$altitude
fake_cov <- dt$fake
season <- as.numeric(as.factor(dt$season))

# iterations, thin, burn in, chains
ni <- 5000
nt <- 5
nb <- 2000
nc <- 3

# m10ppc - herirarchical model with breed, number of stopovers, and mig duration

sink("m10ppc.jags")
cat("
    # likelihood
    model{
    for (i in 1:N){
      alt_est[i] ~ dnorm(mu[i], tau)
        mu[i] <- alo*alt_obs[i] + alpha1
      state[i] ~ dbern(p[i])
        logit(p[i]) <- ale*alt_est[i] + sn[season[i]] + fk*fake_cov[i] + alpha
    
    }
    
    # priors
    alpha ~ dnorm(0, 0.001) # alpha for state
    alpha1 ~ dnorm(0, 0.001) # alpha for alt
    
    alo ~ dnorm(0,0.001)
    ale ~ dnorm(0,0.001)
    fk ~ dnorm(0,0.001)
    sn[1] <- 0 # corner constriant (fall is 1 for some reason, so eveything is relative to fall)
    for (j in 2:4) {sn[j] ~ dnorm(0, 0.001)} # prior for each category of season
    
    tau <- pow(sig, -2) # for alt error term
    sig ~ dunif(0, 10) # for alt error term
    }
    ",fill = TRUE)
sink()

# Bundle data
jags.data <- list(state=state, alt_obs=altitude, season=season, fake_cov=fake_cov, N = nrow(dt))


# Initial values
inits <- function (){list(sn=c(NA, NA, NA, 0), alpha = 0)}

# Parameters monitored
parameters <- c('alo', 'ale', 'sn', 'fk', 'alpha')

# Call jags from R
m10ppc <- jags(data=jags.data, inits=inits, parameters.to.save=parameters, model.file="m10ppc.jags", 
               n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb, parallel=T)
print(m10ppc)
traceplot(m10ppc) #lol

#save(m10ppc, file='bbpl_m10ppc_111621.RData')